import numpy as np

def determinant(matrix):
    """Вычисляет определитель матрицы."""
    return np.linalg.det(matrix)

def cramer_method(A, B):
    """Решает систему линейных уравнений методом Крамера."""

    n = A.shape[0]  # Количество уравнений
    D = determinant(A)  # Определитель основной матрицы

    if D == 0:
        raise ValueError("Определитель равен нулю, система не имеет единственного решения.")
    print('-------------------------------------------')
    print(A)
    print(f"Определитель D: {D:.2f}")
    print('-------------------------------------------')
    sol = []
    for i in range(n):
        # Создаем матрицу Ai, заменяя i-й столбец на B
        Ai = A.copy()
        Ai[:, i] = B
        print(Ai)
        Di = determinant(Ai)  # Определитель матрицы Ai
        x_i = Di / D  # Решение для переменной x_i
        sol.append(x_i)

        print(f"Определитель D{i + 1}: {Di:.2f}")
        print(f"x{i + 1} = D{i + 1}/D = {x_i:.2f}")
        print('-------------------------------------------')
    return sol

def input_matrix():
    """Ввод данных"""

    # Ввод размеров матрицы
    n = int(input("Введите количество уравнений (количество неизвестных): "))
    if n < 1:
        raise ValueError('Количество уравнение не может быть меньше 1')
    print('Ввод организован в виде АХ = В. А - матрица коэфициентов, В - свободные члены')

    # Ввод матрицы A
    A = np.zeros((n, n))
    print("Введите элементы матрицы A (строка за строкой, элементы разделяются пробелом):")
    for i in range(n):
        str_ = list(map(float, input(f"Строка {i + 1}: ").split()))
        if len(str_) != n:
            raise ValueError("Количество элементов в строке должно соответствовать размерности системы.")
        A[i] = str_

    # Ввод свободных членов
    B = np.zeros(n)
    print("Введите элементы B (свободные члены):")
    B = list(map(float, input().split()))
    if len(B) != n:
        raise ValueError("Количество элементов вектора B должно соответствовать размерности системы.")
    return A, B